import base64

def from_hex(hex_input):
    return ''.join(chr(int(hex_input[i:i+2], 16)) for i in range(0, len(hex_input), 2))

def unshift(input_str, amount):
    result = ""
    for c in input_str:
        if c.isalpha():
            base = 'A' if c.isupper() else 'a'
            offset = (ord(c) - ord(base) - amount) % 26
            c = chr(ord(base) + offset)
        result += c
    return result

def xor_with_key(hex_input, key):
    xored = ""
    for i in range(0, len(hex_input), 2):
        hex_char = int(hex_input[i:i+2], 16)
        hex_char ^= key
        xored += f'{hex_char:02x}'
    return xored

def decrypt_flag(encrypted_flag):
    known_encrypted_flag = "34395e5039624e476c6e4f6a7e6b3a5e705c5f45714c4f507d5c3a683d3138507e3d5f7339624f457b484e6d707b3a506e7e6558"
    
    # Step 1: XOR with key
    xored = xor_with_key(known_encrypted_flag, 9)
    
    # Step 2: Convert hex to string
    hex_to_str = from_hex(xored)
    
    # Step 3: Reverse shift
    unshifted = unshift(hex_to_str, 25)
    
    # Step 4: Reverse the string
    reversed_str = unshifted[::-1]
    
    # Step 5: Base64 decode
    original_flag = base64.b64decode(reversed_str).decode()
    
    return original_flag

# Run the decryption
original_flag = decrypt_flag("34395e5039624e476c6e4f6a7e6b3a5e705c5f45714c4f507d5c3a683d3138507e3d5f7339624f457b484e6d707b3a506e7e6558")
print("Original Flag:", original_flag)

